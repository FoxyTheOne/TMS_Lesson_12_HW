package com.tms.lesson12.prog02UsingSynchronized.model;

/**
 * Основная роль производителя - сгенерировать определенный объем данных в буфер, а затем повторить процесс.
 * Производители не будут добавлять данные, когда буфер заполнен, а потребители не будут потреблять данные, когда буфер пуст.
 *
 * Т. обр., производитель должен спать, когда буфер заполнен, а производитель может быть разбужен и начать добавлять данные
 * в буфер до следующего раза, когда потребитель потребит данные в буфере. Точно так же вы также можете позволить потребителю перейти в спящий режим,
 * когда буфер пуст, а затем разбудить потребителя после того, как производитель добавит данные в буфер. Обычно используемые методы включают
 * метод сигнальной лампы и ламповую лампу.
 */
public class ProducerS implements Runnable{
    // Буфер (склад), который будет генерировать определенный объем данных в буфер. Пока он не определен и будет задан через конструктор
    private BufferUsingSynchronized bufferS;

    // Конструктор производителя
    public ProducerS(BufferUsingSynchronized bufferS){
        this.bufferS = bufferS;
    }

    @Override
    public void run() {
        doInnerLogic();
    }

    // Метод (бесконечный!) для генерации определенного объема данных в буфер
    private void doInnerLogic() {
        while (true) {
            // добавить элемент в буфер
            bufferS.put();
        }
    }
}
